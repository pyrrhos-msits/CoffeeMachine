type: edu
custom_name: stage6
files:
- name: tests.py
  visible: false
  text: |
    from hstest.stage_test import *
    from hstest.test_case import TestCase

    CheckResult.correct = lambda: CheckResult(True, '')
    CheckResult.wrong = lambda feedback: CheckResult(False, feedback)

    test1_input = '''remaining
    buy
    2
    buy
    2
    fill
    1000
    0
    0
    0
    buy
    2
    take
    remaining
    exit
    '''

    test2_input = '''remaining
    fill
    3000
    3000
    3000
    3000
    remaining
    exit
    '''

    test3_input = '''remaining
    buy
    1
    remaining
    exit
    '''

    test4_input = '''remaining
    buy
    2
    remaining
    exit
    '''

    test5_input = '''remaining
    buy
    3
    remaining
    exit
    '''

    test6_input = '''remaining
    take
    remaining
    exit
    '''

    test7_input = '''remaining
    buy
    back
    remaining
    exit
    '''


    class CoffeeMachineTest(StageTest):
        def generate(self) -> List[TestCase]:
            return TestCase.from_stepik(
                [
                    (
                        test1_input,
                        (
                            700 - 400,
                            390 - 540,
                            80 - 120,
                            7 - 9,
                            0 - 550,
                            "This test is exactly like in the example "
                            "- try to run it by yourself"
                        )
                    ),

                    (
                        test2_input,
                        (
                            3000,
                            3000,
                            3000,
                            3000,
                            0,
                            "This test checks \"fill\" action"
                        )
                    ),

                    (
                        test3_input,
                        (
                            -250,
                            0,
                            -16,
                            -1,
                            4,
                            "This test checks \"buy\" " +
                            "action with the first variant of coffee"
                        )
                    ),

                    (
                        test4_input,
                        (
                            -350,
                            -75,
                            -20,
                            -1,
                            7,
                            "This test checks \"buy\" " +
                            "action with the second variant of coffee"
                        )
                    ),

                    (
                        test5_input,
                        (
                            -200,
                            -100,
                            -12,
                            -1,
                            6,
                            "This test checks \"buy\" " +
                            "action with the third variant of coffee"
                        )
                    ),
                    (
                        test6_input,
                        (
                            0,
                            0,
                            0,
                            0,
                            -550,
                            "This test checks \"take\" action"
                        )
                    ),

                    (
                        test7_input,
                        (
                            0,
                            0,
                            0,
                            0,
                            0,
                            "This test checks \"back\" " +
                            "action right after \"buy\" action"
                        )
                    ),
                ]
            )

        def check(self, reply: str, clue: Any) -> CheckResult:
            if len(reply.splitlines()) <= 1:
                return CheckResult.wrong('Too few lines in output')

            water_, milk_, beans_, cups_, money_, feedback = clue

            milk = []
            water = []
            beans = []
            cups = []
            money = []

            for line in reply.splitlines():
                line = line.replace('$', '').strip()
                if len(line.split()) == 0:
                    continue
                first_word = line.split()[0]
                if not first_word.isdigit():
                    continue
                amount = int(first_word)
                if 'milk' in line:
                    milk += amount,
                elif 'water' in line:
                    water += amount,
                elif 'beans' in line:
                    beans += amount,
                elif 'cups' in line:
                    cups += amount,
                elif 'money' in line or 'cash' in line:
                    money += amount,

            if len(milk) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"milk\", " +
                    f"found: {len(milk)}"
                )

            if len(water) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"water\", " +
                    f"found: {len(water)}"
                )

            if len(beans) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"beans\", " +
                    f"found: {len(beans)}"
                )

            if len(cups) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"cups\", " +
                    f"found: {len(cups)}"
                )

            if len(money) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"money\", " +
                    f"found: {len(money)}"
                )

            milk = milk[0], milk[-1]
            water = water[0], water[-1]
            beans = beans[0], beans[-1]
            cups = cups[0], cups[-1]
            money = money[0], money[-1]

            diff = lambda item: item[1] - item[0]

            is_correct = (
                diff(water) == water_ and
                diff(milk) == milk_ and
                diff(beans) == beans_ and
                diff(cups) == cups_ and
                diff(money) == money_
            )
            return CheckResult(is_correct, feedback)


    if __name__ == '__main__':
        CoffeeMachineTest('machine.coffee_machine').run_tests()
  learner_created: false
- name: machine/coffee_machine.py
  visible: true
  text: |2

    # Bestand an Rohstoffen in der Kaffeemaschine
    water = 400
    milk = 540
    beans = 120
    cups = 9
    money = 550

    # deklaration der Variable action
    action = ''

    # string wenn genug Ressourcen für die Zubereitung eines Kaffees vorhanden sind
    enough = "I have enough resources, making you a coffee!\n"

    #String für Nicht genug Wasser, bohnen tassen
    new = 'Sorry, not enough water'
    neb = 'Sorry, not enough beans'
    nec = 'Sorry, not enough cups'
    nem = 'Sorry not enough milk'

    # err_count wird zur Steuerung der while Schleife benutzt
    err_count = 0

    # function für das Hauptmenü
    def main():
        global action
        action = input('\nWrite action (buy, fill, take, remaining, exit):\n')

    # Funktion zum Ausdruck der Bestände - prt_Inv = print Inventar
    def prt_Inv():
        print('''\nThe coffee machine has:\n{} of water\n{} of milk\n{} of coffee beans\n{} of disposable cups\n${} of money\n'''.format(water, milk, beans, cups, money))

    # def der Funktion nach Auswahl der action 'fill'
    def fill():
        global water, milk,beans,cups,money
        water = water + int(input('Write how many ml of water do you want to add:\n'))
        milk = milk + int(input('Write how many ml of milk do you want to add:\n'))
        beans = beans + int(input('Write how many grams of coffee beans do you want to add:\n'))
        cups = cups + int(input('Write how many disposable cups of coffee do you want to add:\n'))

    # def der Funktion nach Auswahl der Aktion take
    def take():
        global money
        print('I gave you ${}\n'.format(money))
        money = 0

    # def der Funktion nach Auswahl der action 'exit'
    '''über builtIn exit()'''

    # def function 'remaining'
    def remaining():
        prt_Inv()
    # zum Schluss wenn die Schleife fertig ist

    # def der einzelnen Kaffeesorten
    def espresso():
        global water, beans, cups, money
        if water >= 250 and beans >= 16 and cups >= 1:
            water -= 250
            beans -= 16
            cups -= 1
            money += 4
            print(enough)
        else:
            if water < 250:
                print(new)
            elif beans < 16:
                print(neb)
            elif cups < 1:
                print(nec)

    def latte():
        global water, beans, cups, milk, money
        if water >= 350 and beans >= 20 and cups >= 1 and milk >= 75:
            water -= 350
            beans -= 20
            milk -= 75
            cups -= 1
            money += 7
            print(enough)
        else:
            if water < 350:
                print(new)
            elif beans < 20:
                print(neb)
            elif cups < 1:
                print(nec)
            elif milk < 75:
                print(nem)

    def cappuccino():
        global water, beans, cups, milk, money
        if water >= 200 and beans >= 12 and cups >= 1 and milk >= 100:
            water -= 200
            beans -= 12
            milk -= 100
            cups -= 1
            money += 6
            print(enough)
        else:
            if water < 200:
                print(new)
            elif beans < 12:
                print(neb)
            elif cups < 1:
                print(nec)
            elif milk < 100:
                print(nem)

    # def der Funktion buy
    def buy():
        coffe_typ = input('\nWhat do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino:\nback - to main  menu:')
        if coffe_typ == '1':
            espresso()
        elif coffe_typ == '2':
            latte()
        elif coffe_typ == '3':
            cappuccino()




    # def error wenn falsche Eingabe gemacht wird
    def error():
        global err_count
        print('Only: "buy", "fill", "remaining","exit" are allowed to enter. Please try again')
        err_count += 1

    # error count zurücksetzen wenn er 1 ist und die action ausgeführt wurde
    def errct():
        global err_count
        if err_count == 1:
            err_count -= 1
    # Programmexecution startet hier >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    # 1. Start
    # druckt das Inventar vor dem Start aus
    # prt_Inv()
    # Fragt die gewünschte Aktion zum Start ab
    main()
    # 2. Schleife des eigentlichen Programms

    while action != 'exit':
        # ruft die entsprechende Funktion auf
        if action == 'fill':
            fill()
            errct()
        elif action == 'take':
            take()
            errct()
        elif action == 'exit':
            errct()
            exit()
        elif action == 'remaining':
            remaining()
            errct()
        elif action == 'buy':
            buy()
            errct()
        elif action != 'buy' and action != 'fill' and action != 'take' and action != 'remaining' and action != 'back' and err_count == 0:
            errct()
            error()
        main()
  learner_created: true
feedback_link: https://hyperskill.org/projects/68/stages/371/implement
status: Solved
record: -1
