type: edu
custom_name: stage5
files:
- name: tests.py
  visible: false
  text: |
    from hstest.stage_test import *
    from hstest.test_case import TestCase

    CheckResult.correct = lambda: CheckResult(True, '')
    CheckResult.wrong = lambda feedback: CheckResult(False, feedback)

    test1_input = '''remaining
    buy
    2
    buy
    2
    fill
    1000
    0
    0
    0
    buy
    2
    take
    remaining
    exit
    '''

    test2_input = '''remaining
    fill
    3000
    3000
    3000
    3000
    remaining
    exit
    '''

    test3_input = '''remaining
    buy
    1
    remaining
    exit
    '''

    test4_input = '''remaining
    buy
    2
    remaining
    exit
    '''

    test5_input = '''remaining
    buy
    3
    remaining
    exit
    '''

    test6_input = '''remaining
    take
    remaining
    exit
    '''

    test7_input = '''remaining
    buy
    back
    remaining
    exit
    '''


    class CoffeeMachineTest(StageTest):
        def generate(self) -> List[TestCase]:
            return TestCase.from_stepik(
                [
                    (
                        test1_input,
                        (
                            700 - 400,
                            390 - 540,
                            80 - 120,
                            7 - 9,
                            0 - 550,
                            "This test is exactly like in the example "
                            "- try to run it by yourself"
                        )
                     ),

                    (
                        test2_input,
                        (
                            3000,
                            3000,
                            3000,
                            3000,
                            0,
                            "This test checks \"fill\" action"
                        )
                    ),

                    (
                        test3_input,
                        (
                            -250,
                            0,
                            -16,
                            -1,
                            4,
                            "This test checks \"buy\" " +
                            "action with the first variant of coffee"
                        )
                    ),

                    (
                        test4_input,
                        (
                            -350,
                            -75,
                            -20,
                            -1,
                            7,
                            "This test checks \"buy\" " +
                            "action with the second variant of coffee"
                        )
                    ),

                    (
                        test5_input,
                        (
                            -200,
                            -100,
                            -12,
                            -1,
                            6,
                            "This test checks \"buy\" " +
                            "action with the third variant of coffee"
                        )
                    ),
                    (
                        test6_input,
                        (
                            0,
                            0,
                            0,
                            0,
                            -550,
                            "This test checks \"take\" action"
                        )
                    ),

                    (
                        test7_input,
                        (
                            0,
                            0,
                            0,
                            0,
                            0,
                            "This test checks \"back\" " +
                            "action right after \"buy\" action"
                        )
                    ),
                ]
            )

        def check(self, reply: str, clue: Any) -> CheckResult:
            if len(reply.splitlines()) <= 1:
                return CheckResult.wrong('Too few lines in output')

            water_, milk_, beans_, cups_, money_, feedback = clue

            milk = []
            water = []
            beans = []
            cups = []
            money = []

            for line in reply.splitlines():
                line = line.replace('$', '').strip()
                if len(line.split()) == 0:
                    continue
                first_word = line.split()[0]
                if not first_word.isdigit():
                    continue
                amount = int(first_word)
                if 'milk' in line:
                    milk += amount,
                elif 'water' in line:
                    water += amount,
                elif 'beans' in line:
                    beans += amount,
                elif 'cups' in line:
                    cups += amount,
                elif 'money' in line or 'cash' in line:
                    money += amount,

            if len(milk) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"milk\", " +
                    f"found: {len(milk)}"
                )

            if len(water) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"water\", " +
                    f"found: {len(water)}"
                )

            if len(beans) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"beans\", " +
                    f"found: {len(beans)}"
                )

            if len(cups) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"cups\", " +
                    f"found: {len(cups)}"
                )

            if len(money) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"money\", " +
                    f"found: {len(money)}"
                )

            milk = milk[0], milk[-1]
            water = water[0], water[-1]
            beans = beans[0], beans[-1]
            cups = cups[0], cups[-1]
            money = money[0], money[-1]

            diff = lambda item: item[1] - item[0]

            is_correct = (
                diff(water) == water_ and
                diff(milk) == milk_ and
                diff(beans) == beans_ and
                diff(cups) == cups_ and
                diff(money) == money_
            )
            return CheckResult(is_correct, feedback)


    if __name__ == '__main__':
        CoffeeMachineTest('machine.coffee_machine').run_tests()
  learner_created: false
- name: machine/coffee_machine.py
  visible: true
  text: |2

    # Bestand an Rohstoffen in der Kaffeemaschine
    water = 1200
    milk = 540
    beans = 120
    cups = 9
    money = 550

    # Funktion zum Ausdruck der Bestände - prt_Inv = print Inventar
    def prt_Inv():
        print('''\nThe coffee machine has:\n{} of water\n{} of milk\n{} of coffee beans\n{} of disposable cups\n{} of money\n'''.format(water, milk, beans, cups, money))
    # def der Funktion nach Auswahl der action 'fill'
    def fill():
        global water, milk,beans,cups,money
        water = water + int(input('Write how many ml of water do you want to add:\n>'))
        milk = milk + int(input('Write how many ml of milk do you want to add:\n>'))
        beans = beans + int(input('Write how many grams of coffee beans do you want to add:\n>'))
        cups = cups + int(input('Write how many disposable cups of coffee do you want to add:\n>'))
    # def der Funktion nach Auswahl der Aktion take
    def take():
        global money
        print('I gave you ${}'.format(money))
        money = 0

    # def der einzelnen Kaffeesorten
    def espresso():
        global water, beans, cups, money
        water -= 250
        beans -= 16
        cups -= 1
        money += 4

    def latte():
        global water, beans, cups, milk, money
        water -= 350
        beans -= 20
        milk -= 75
        cups -= 1
        money += 7

    def cappuccino():
        global water, beans, cups, milk, money
        water -= 200
        beans -= 12
        milk -= 100
        cups -= 1
        money += 6

    # def der Funktion buy
    def buy():
        coffe_typ = input('What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino:\n>')
        if coffe_typ == '1':
            espresso()
        elif coffe_typ == '2':
            latte()
        elif coffe_typ == '3':
            cappuccino()

    # Programmexecution startet hier >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    # druckt das Inventar vor dem Start aus
    prt_Inv()
    # Fragt die gewünschte Aktion ab
    action = input('Write action (buy, fill, take):\n>')
    # ruft die entsprechende Funktion auf
    if action == 'fill':
        fill()
    elif action == 'take':
        take()
    elif action == 'buy':
        buy()

    prt_Inv()# druckt das Inventar am Ende aus



    # # Precondition
    # water_const = 200 #ml
    # milk_const = 50 #ml
    # beans_const = 15 #g
    # #1. Abfragen der vorhandenen Mengen an Rohstoffen
    # water_av = int(input('Write how many ml of water the coffee machine has: >'))
    # milk_av = int(input('Write how many ml of milk the coffee machine has: >'))
    # beans_av = int(input('Write how many grams of coffee beans the coffee machine has: >'))
    # #2. Abfragen der gewünschten Kaffeemenge
    # cups_count = int(input('Write how many cups of coffee you will need: >'))
    # #3. Berechnen wieviel Tassen Kaffee geliefert werden können
    # water_pos = math.floor(water_av / water_const)
    # milk_pos = math.floor(milk_av / milk_const)
    # beans_pos = math.floor(beans_av / beans_const)
    # cups_pos = min(water_pos, milk_pos, beans_pos)
    #
    # if cups_pos <= 0:
    #     print('No, I can make only 0 cups of coffee'.format(cups_pos))
    # elif cups_pos > cups_count:
    #     cups_more = cups_pos - cups_count
    #     print('Yes, I can make that amount of coffee (and even {} more than that)'.format(cups_more))
    # elif cups_pos > 0 and cups_pos < cups_count:
    #     print('No, I can make only {} cups of coffee'.format(cups_pos))
    # elif cups_pos == cups_count:
    #     print('Yes I can make that amount of coffee')
    #
  learner_created: true
- name: machine/Probe.py
  visible: true
  text: |-
    water = 1200
    milk = 540
    beans = 120
    cups = 9
    money = 550

    def prt_Inv():
        print('''\nThe coffee machine has:\n{} of water\n{} of milk\n{} of coffee beans\n{} of disposable cups\n{} of money\n'''.format(water, milk, beans, cups, money))

    def espresso():
        global water, beans, cups
        water -= 250
        beans -= 16
        cups -= 1

    prt_Inv()
    espresso()
    prt_Inv()
  learner_created: true
feedback_link: https://hyperskill.org/projects/68/stages/370/implement
status: Solved
record: 5
